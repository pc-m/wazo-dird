#! /bin/sh

set -e

LOG_FILENAME='/var/log/xivo-dird.log'
PG_USER='asterisk'
PG_USER_PASSWORD='proformatique'
DB_NAME='asterisk'
PG_DB_URI='postgresql:///postgres'
DIRD_ALEMBIC_INI_PATH='/usr/share/xivo-dird'

pg_is_running () {
	pg_lsclusters --no-header | grep -q online
}

case "$1" in
	configure)
		if pg_is_running ; then
			xivo-dird-init-db --user postgres --db $DB_NAME --owner $PG_USER --password $PG_USER_PASSWORD --uri $PG_DB_URI
			echo "Upgrading xivo-dird database ..."
			(cd $DIRD_ALEMBIC_INI_PATH && alembic -c alembic.ini upgrade head)
		fi

		# add user www-data
		if ! getent passwd www-data > /dev/null ; then
			echo 'Adding system user for www-data' 1>&2
			adduser --system --group --quiet \
				--home /var/www \
				--no-create-home --disabled-login \
				www-data
		fi

		if [ ! -e "$LOG_FILENAME" ]; then
			touch "$LOG_FILENAME"
		fi
		chown www-data: "$LOG_FILENAME"

		# xivo-dird used to rely on nginx. When upgrading from such a version,
		# we want nginx to forget about xivo-dird.
		set +e
		# Return 100 if nginx is not installed (which is valid, think docker).
		invoke-rc.d --query --quiet nginx reload
		status=$?
		if [ $status -ne 100 ] ; then
			# May temporarily fail during upgrade because SSL certs have moved.
			invoke-rc.d nginx reload
		fi
		set -e

		# source_to_display_columns migration
		files=$(grep -rIn 'source_to_display' /etc/xivo-dird/sources.d/* | awk -F ':' '{print $1}')
		for file in $files; do
			/usr/share/xivo-dird/migrations/0001_source_to_display_columns_to_format_columns.py $file
		done
	;;

	abort-upgrade|abort-remove|abort-deconfigure)
	;;

	*)
		echo "postinst called with unknown argument \`$1'" >&2
		exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
